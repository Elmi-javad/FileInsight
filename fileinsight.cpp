// Headers to include: the ui_fileinsight.h is automatically generated by Qt's uic tool on compile
#include "fileinsight.h"
#include "ui_fileinsight.h"

// Main window class
FileInsight::FileInsight(QWidget *parent) :
    // Call the QMainWindow constructor in order make this widget a new window
    QMainWindow(parent),

    // Set up the UI by creating an instance of our UI class and initializing it
    ui(new Ui::FileInsight)
    {
        ui->setupUi(this);
    }

// Destructor for the FileInsight class:
FileInsight::~FileInsight()
{
    // Delete the temporary ui variable that we assigned in the constructor.
    delete ui;
}

void FileInsight::on_actionQuit_triggered()
{
    // Implement the Quit action in the File menu. This calls quit() on the global "qApp"
    // pointer, which refers to the current running QApplication instance
    qApp->quit();
}

void FileInsight::chooseFile()
{
    // This implements file selection via Qt's file dialog built-ins
    QString filename = QFileDialog::getOpenFileName(this, tr("Select File"), QString(),
            tr("All Files (*)"));
    std::cout << "Selected file: " << filename.toStdString() << std::endl;

    if (!filename.isEmpty()) {
        // Open the file afterwards.
        this->openFile(filename);
    }
}

void FileInsight::openFile(QString filename)
{
    std::cout << "magic cookie: " << this->magic_cookie << std::endl;

    /* Initialize libmagic by fetching ourselves special cookies from magic_open() - this is
     * similar to fetching a specific instance of a class. More information about the libmagic API:
     * https://linux.die.net/man/3/libmagic
     */
    if (this->magic_cookie == 0) {
        // libmagic flags (e.g. MAGIC_CHECK) go here
        this->magic_cookie = magic_open(MAGIC_CHECK | MAGIC_COMPRESS);

        // Tell libmagic to load the default file type definitions by passing NULL as filename argument
        magic_load(this->magic_cookie, NULL);
    }

    /* Convert QString into const char *, so that it can be plugged into the libmagic C library
     * Note: the QByteArray created by toUtf8() must be kept as a variable and not destroyed, or
     * the pointer returned by constData() may become invalid.
     */
    QByteArray bytes = filename.toUtf8();
    const char * cfilename = bytes.constData();

    // Call libmagic on the filename - it will return a string describing the file.
    const char * magic_output = magic_file(this->magic_cookie, cfilename);
    std::cout << "libmagic output: " << magic_output << std::endl;

    /* A second cookie (libmagic initialized with different options) allows us to fetch the MIME
     * type of the file instead of the description.
     */
    if (this->magic_cookie_mime == 0) {
        this->magic_cookie_mime = magic_open(MAGIC_CHECK | MAGIC_MIME_TYPE);
        magic_load(this->magic_cookie_mime, NULL);
    }

    // Fetch the MIME type for the given file: this allows us to fetch an icon for it.
    QString mimetype = magic_file(this->magic_cookie_mime, cfilename);
    QString iconname = mimetype;
    //std::cout << "errors?: " << magic_error(this->magic_cookie_mime);

    /* Generic MIME types are created by taking first part of the type (e.g. "video" from "video/ogg")
     * and adding "-x-generic" to it. So, the generic type for video/ogg would be video-x-generic.
     */
    QString generic_type = mimetype.split("/")[0] + "-x-generic";

    // Replace any "/" with "-" in the MIME type before icon lookup.
    ui->iconDisplay->setText(mimetype);
    int slashlocation = iconname.indexOf("/");

    if (slashlocation != -1) {
        iconname.replace(slashlocation, 1, "-");
    }

    std::cout << "Looking up icon for MIME type " << mimetype.toStdString() <<
                 " (generic name: " << generic_type.toStdString() << ")" << std::endl;

    // Display everything
    ui->output->setPlainText(magic_output);
    ui->filenameOutput->setPlainText(filename);
    ui->mimeOutput->setPlainText(mimetype);

    QIcon icon;
    if (QIcon::hasThemeIcon(iconname)) {
        // If the theme we're using has an icon for the MIME type we're using for,
        // prefer that,
        icon = QIcon::fromTheme(iconname);
    } else {
        // Otherwise, fall back to the generic type; if that also fails, use the generic file icon.
        icon = QIcon::fromTheme(generic_type, this->iconprovider.icon(QFileIconProvider::File));
    }


    ui->iconDisplay->setPixmap(icon.pixmap(128,128));
}

void FileInsight::on_selectFileButton_clicked()
{
    this->chooseFile();
}

void FileInsight::on_actionSelect_triggered()
{
    this->chooseFile();
}
