// Headers to include: the ui_fileinsight.h is automatically generated by Qt's uic tool on compile
#include "fileinsight.h"
#include "ui_fileinsight.h"

// Main window class
FileInsight::FileInsight(QWidget *parent) :
    // Call the QMainWindow constructor in order make this widget a new window
    QMainWindow(parent),

    // Set up the UI by creating a UI class instance and initializing it
    ui(new Ui::FileInsight)
    {
        ui->setupUi(this);
    }

    // Destructor for the FileInsight class: delete the temporary ui variable that we assigned in
    // the constructor.
    FileInsight::~FileInsight()
    {
        delete ui;
    }

    void FileInsight::on_actionQuit_triggered()
    {
        // Implement the Quit action in the File menu. This calls quit() on the global "qApp"
        // pointer, which refers to the current running QApplication instance
        qApp->quit();
    }

    void FileInsight::chooseFile()
    {
        // Implement the select file button

        QString filename = QFileDialog::getOpenFileName(this, tr("Select File"), QString(),
                tr("All Files (*)"));
        //std::cout << "Selected file: " << filename.toStdString() << std::endl;
        if (!filename.isEmpty()) {
            std::cout << "calling openFile()" << std::endl;
            this->openFile(filename);
        }
    }

    void FileInsight::openFile(QString filename)
    {
        magic_t cookie = magic_open(MAGIC_CHECK);
        magic_load(cookie, NULL);
        // Convert QString into const char *, so that it can be plugged into the libmagic C library
        const char * cfilename = filename.toUtf8().data();

        const char * magic_output = magic_file(cookie, cfilename);
        std::cout << "libmagic output: " << magic_output << std::endl;

        magic_close(cookie);
    }

    void FileInsight::on_selectFileButton_clicked()
    {
        this->chooseFile();
    }

    void FileInsight::on_actionSelect_triggered()
    {
        this->chooseFile();
    }
